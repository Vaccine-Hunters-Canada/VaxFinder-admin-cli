// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	APIKeyHeaderScopes = "APIKeyHeader.Scopes"
)

// Defines values for InputTypeEnum.
const (
	InputTypeEnum0 InputTypeEnum = 1

	InputTypeEnum1 InputTypeEnum = 2

	InputTypeEnum2 InputTypeEnum = 3
)

// AddressCreateRequest defines model for AddressCreateRequest.
type AddressCreateRequest struct {
	City      *string `json:"city,omitempty"`
	Latitude  float32 `json:"latitude"`
	Line1     *string `json:"line1,omitempty"`
	Line2     *string `json:"line2,omitempty"`
	Longitude float32 `json:"longitude"`
	Postcode  string  `json:"postcode"`
	Province  string  `json:"province"`
}

// AddressResponse defines model for AddressResponse.
type AddressResponse struct {
	City      *string   `json:"city,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	Id        int       `json:"id"`
	Line1     *string   `json:"line1,omitempty"`
	Line2     *string   `json:"line2,omitempty"`
	Postcode  string    `json:"postcode"`
	Province  string    `json:"province"`
}

// AddressUpdateRequest defines model for AddressUpdateRequest.
type AddressUpdateRequest struct {
	City      *string `json:"city,omitempty"`
	Id        int     `json:"id"`
	Latitude  float32 `json:"latitude"`
	Line1     *string `json:"line1,omitempty"`
	Line2     *string `json:"line2,omitempty"`
	Longitude float32 `json:"longitude"`
	Postcode  string  `json:"postcode"`
	Province  string  `json:"province"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// An enumeration.
type InputTypeEnum int

// LocationCreateRequest defines model for LocationCreateRequest.
type LocationCreateRequest struct {
	Active       int     `json:"active"`
	Address      *int    `json:"address,omitempty"`
	Name         string  `json:"name"`
	Notes        *string `json:"notes,omitempty"`
	Organization *int    `json:"organization,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	Postcode     *string `json:"postcode,omitempty"`
	Tags         *string `json:"tags,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// LocationExpandedResponse defines model for LocationExpandedResponse.
type LocationExpandedResponse struct {
	Active       int                   `json:"active"`
	Address      *AddressResponse      `json:"address,omitempty"`
	CreatedAt    time.Time             `json:"createdAt"`
	Id           int                   `json:"id"`
	Name         string                `json:"name"`
	Notes        *string               `json:"notes,omitempty"`
	Organization *OrganizationResponse `json:"organization,omitempty"`
	Phone        *string               `json:"phone,omitempty"`
	Postcode     *string               `json:"postcode,omitempty"`
	Tags         *string               `json:"tags,omitempty"`
	Url          *string               `json:"url,omitempty"`
}

// LocationResponse defines model for LocationResponse.
type LocationResponse struct {
	Active       int       `json:"active"`
	Address      *int      `json:"address,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
	Id           int       `json:"id"`
	Name         string    `json:"name"`
	Notes        *string   `json:"notes,omitempty"`
	Organization *int      `json:"organization,omitempty"`
	Phone        *string   `json:"phone,omitempty"`
	Postcode     *string   `json:"postcode,omitempty"`
	Tags         *string   `json:"tags,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// LocationUpdateRequest defines model for LocationUpdateRequest.
type LocationUpdateRequest struct {
	Active       int     `json:"active"`
	Address      *int    `json:"address,omitempty"`
	Id           int     `json:"id"`
	Name         string  `json:"name"`
	Notes        *string `json:"notes,omitempty"`
	Organization *int    `json:"organization,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	Postcode     *string `json:"postcode,omitempty"`
	Tags         *string `json:"tags,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// OrganizationCreateRequest defines model for OrganizationCreateRequest.
type OrganizationCreateRequest struct {
	Description *string `json:"description,omitempty"`
	FullName    *string `json:"fullName,omitempty"`
	ShortName   string  `json:"shortName"`
	Url         *string `json:"url,omitempty"`
}

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description *string   `json:"description,omitempty"`
	FullName    *string   `json:"fullName,omitempty"`
	Id          int       `json:"id"`
	ShortName   string    `json:"shortName"`
	Url         *string   `json:"url,omitempty"`
}

// OrganizationUpdateRequest defines model for OrganizationUpdateRequest.
type OrganizationUpdateRequest struct {
	Description *string `json:"description,omitempty"`
	FullName    *string `json:"fullName,omitempty"`
	ShortName   string  `json:"shortName"`
	Url         *string `json:"url,omitempty"`
}

// RequirementResponse defines model for RequirementResponse.
type RequirementResponse struct {
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`
	Id          int       `json:"id"`
	Name        string    `json:"name"`
}

// RequirementsCreateRequest defines model for RequirementsCreateRequest.
type RequirementsCreateRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// RequirementsUpdateRequest defines model for RequirementsUpdateRequest.
type RequirementsUpdateRequest struct {
	Description string `json:"description"`
	Id          int    `json:"id"`
	Name        string `json:"name"`
}

// VaccineAvailabilityCreateRequest defines model for VaccineAvailabilityCreateRequest.
type VaccineAvailabilityCreateRequest struct {
	Date *openapi_types.Date `json:"date,omitempty"`

	// An enumeration.
	InputType       *InputTypeEnum `json:"inputType,omitempty"`
	Location        int            `json:"location"`
	NumberAvailable *int           `json:"numberAvailable,omitempty"`
	NumberTotal     *int           `json:"numberTotal,omitempty"`
	Tags            *string        `json:"tags,omitempty"`
	Vaccine         *int           `json:"vaccine,omitempty"`
}

// VaccineAvailabilityExpandedResponse defines model for VaccineAvailabilityExpandedResponse.
type VaccineAvailabilityExpandedResponse struct {
	CreatedAt time.Time           `json:"createdAt"`
	Date      *openapi_types.Date `json:"date,omitempty"`
	Id        interface{}         `json:"id"`

	// An enumeration.
	InputType       *InputTypeEnum                        `json:"inputType,omitempty"`
	Location        LocationExpandedResponse              `json:"location"`
	NumberAvailable *int                                  `json:"numberAvailable,omitempty"`
	NumberTotal     *int                                  `json:"numberTotal,omitempty"`
	Tags            *string                               `json:"tags,omitempty"`
	Timeslots       []VaccineAvailabilityTimeslotResponse `json:"timeslots"`
	Vaccine         *int                                  `json:"vaccine,omitempty"`
}

// VaccineAvailabilityRequirementsCreateRequest defines model for VaccineAvailabilityRequirementsCreateRequest.
type VaccineAvailabilityRequirementsCreateRequest struct {
	Requirements []int `json:"requirements"`
}

// VaccineAvailabilityRequirementsResponse defines model for VaccineAvailabilityRequirementsResponse.
type VaccineAvailabilityRequirementsResponse struct {
	Active              bool      `json:"active"`
	CreatedAt           time.Time `json:"createdAt"`
	Id                  int       `json:"id"`
	Requirement         int       `json:"requirement"`
	VaccineAvailability string    `json:"vaccineAvailability"`
}

// VaccineAvailabilityRequirementsUpdateRequest defines model for VaccineAvailabilityRequirementsUpdateRequest.
type VaccineAvailabilityRequirementsUpdateRequest struct {
	Active bool `json:"active"`
}

// VaccineAvailabilityResponse defines model for VaccineAvailabilityResponse.
type VaccineAvailabilityResponse struct {
	CreatedAt time.Time           `json:"createdAt"`
	Date      *openapi_types.Date `json:"date,omitempty"`
	Id        string              `json:"id"`

	// An enumeration.
	InputType       *InputTypeEnum `json:"inputType,omitempty"`
	Location        int            `json:"location"`
	NumberAvailable *int           `json:"numberAvailable,omitempty"`
	NumberTotal     *int           `json:"numberTotal,omitempty"`
	Tags            *string        `json:"tags,omitempty"`
	Vaccine         *int           `json:"vaccine,omitempty"`
}

// VaccineAvailabilityTimeslotCreateRequest defines model for VaccineAvailabilityTimeslotCreateRequest.
type VaccineAvailabilityTimeslotCreateRequest struct {
	ParentID string    `json:"parentID"`
	Time     time.Time `json:"time"`
}

// VaccineAvailabilityTimeslotResponse defines model for VaccineAvailabilityTimeslotResponse.
type VaccineAvailabilityTimeslotResponse struct {
	Active              bool       `json:"active"`
	CreatedAt           time.Time  `json:"createdAt"`
	Id                  string     `json:"id"`
	TakenAt             *time.Time `json:"takenAt,omitempty"`
	Time                time.Time  `json:"time"`
	VaccineAvailability string     `json:"vaccineAvailability"`
}

// VaccineAvailabilityTimeslotUpdateRequest defines model for VaccineAvailabilityTimeslotUpdateRequest.
type VaccineAvailabilityTimeslotUpdateRequest struct {
	TakenAt *time.Time `json:"takenAt,omitempty"`
}

// VaccineAvailabilityUpdateRequest defines model for VaccineAvailabilityUpdateRequest.
type VaccineAvailabilityUpdateRequest struct {
	Date *openapi_types.Date `json:"date,omitempty"`
	Id   interface{}         `json:"id"`

	// An enumeration.
	InputType       *InputTypeEnum `json:"inputType,omitempty"`
	Location        int            `json:"location"`
	NumberAvailable *int           `json:"numberAvailable,omitempty"`
	NumberTotal     *int           `json:"numberTotal,omitempty"`
	Tags            *string        `json:"tags,omitempty"`
	Vaccine         *int           `json:"vaccine,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []string `json:"loc"`
	Msg  string   `json:"msg"`
	Type string   `json:"type"`
}

// CreateAddressApiV1AddressesPostJSONBody defines parameters for CreateAddressApiV1AddressesPost.
type CreateAddressApiV1AddressesPostJSONBody AddressCreateRequest

// UpdateAddressApiV1AddressesAddressIdPutJSONBody defines parameters for UpdateAddressApiV1AddressesAddressIdPut.
type UpdateAddressApiV1AddressesAddressIdPutJSONBody AddressUpdateRequest

// CreateLocationApiV1LocationsPostJSONBody defines parameters for CreateLocationApiV1LocationsPost.
type CreateLocationApiV1LocationsPostJSONBody LocationCreateRequest

// UpdateLocationApiV1LocationsLocationIdPutJSONBody defines parameters for UpdateLocationApiV1LocationsLocationIdPut.
type UpdateLocationApiV1LocationsLocationIdPutJSONBody LocationUpdateRequest

// CreateOrganizationApiV1OrganizationsPostJSONBody defines parameters for CreateOrganizationApiV1OrganizationsPost.
type CreateOrganizationApiV1OrganizationsPostJSONBody OrganizationCreateRequest

// UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONBody defines parameters for UpdateOrganizationApiV1OrganizationsOrganizationIdPut.
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONBody OrganizationUpdateRequest

// CreateRequirementApiV1RequirementsPostJSONBody defines parameters for CreateRequirementApiV1RequirementsPost.
type CreateRequirementApiV1RequirementsPostJSONBody RequirementsCreateRequest

// UpdateRequirementApiV1RequirementsRequirementIdPutJSONBody defines parameters for UpdateRequirementApiV1RequirementsRequirementIdPut.
type UpdateRequirementApiV1RequirementsRequirementIdPutJSONBody RequirementsUpdateRequest

// ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams defines parameters for ListVaccineAvailabilityApiV1VaccineAvailabilityGet.
type ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams struct {

	// **Search for vaccine availabilities after a certain date and time (UTC)**. The default value is the current date and time (UTC).<br/><br/>Valid example(s): *2021-05-05T21:59:02.961804+00:00*
	MinDate *time.Time `json:"min_date,omitempty"`

	// **Search for vaccine availabilities within the vicinity of a postal code.**<br/><br/>Valid example(s): *K1A; K1A0; K1A0k; K1A0K9*
	PostalCode string `json:"postal_code"`
}

// CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONBody defines parameters for CreateVaccineAvailabilityApiV1VaccineAvailabilityPost.
type CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONBody VaccineAvailabilityCreateRequest

// UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONBody defines parameters for UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut.
type UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONBody VaccineAvailabilityUpdateRequest

// CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONBody defines parameters for CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost.
type CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONBody VaccineAvailabilityRequirementsCreateRequest

// UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONBody defines parameters for UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut.
type UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONBody VaccineAvailabilityRequirementsUpdateRequest

// CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONBody defines parameters for CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost.
type CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONBody VaccineAvailabilityTimeslotCreateRequest

// UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONBody defines parameters for UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut.
type UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONBody VaccineAvailabilityTimeslotUpdateRequest

// CreateAddressApiV1AddressesPostJSONRequestBody defines body for CreateAddressApiV1AddressesPost for application/json ContentType.
type CreateAddressApiV1AddressesPostJSONRequestBody CreateAddressApiV1AddressesPostJSONBody

// UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody defines body for UpdateAddressApiV1AddressesAddressIdPut for application/json ContentType.
type UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody UpdateAddressApiV1AddressesAddressIdPutJSONBody

// CreateLocationApiV1LocationsPostJSONRequestBody defines body for CreateLocationApiV1LocationsPost for application/json ContentType.
type CreateLocationApiV1LocationsPostJSONRequestBody CreateLocationApiV1LocationsPostJSONBody

// UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody defines body for UpdateLocationApiV1LocationsLocationIdPut for application/json ContentType.
type UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody UpdateLocationApiV1LocationsLocationIdPutJSONBody

// CreateOrganizationApiV1OrganizationsPostJSONRequestBody defines body for CreateOrganizationApiV1OrganizationsPost for application/json ContentType.
type CreateOrganizationApiV1OrganizationsPostJSONRequestBody CreateOrganizationApiV1OrganizationsPostJSONBody

// UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody defines body for UpdateOrganizationApiV1OrganizationsOrganizationIdPut for application/json ContentType.
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONBody

// CreateRequirementApiV1RequirementsPostJSONRequestBody defines body for CreateRequirementApiV1RequirementsPost for application/json ContentType.
type CreateRequirementApiV1RequirementsPostJSONRequestBody CreateRequirementApiV1RequirementsPostJSONBody

// UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody defines body for UpdateRequirementApiV1RequirementsRequirementIdPut for application/json ContentType.
type UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody UpdateRequirementApiV1RequirementsRequirementIdPutJSONBody

// CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody defines body for CreateVaccineAvailabilityApiV1VaccineAvailabilityPost for application/json ContentType.
type CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONBody

// UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody defines body for UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut for application/json ContentType.
type UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONBody

// CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody defines body for CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost for application/json ContentType.
type CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONBody

// UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody defines body for UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut for application/json ContentType.
type UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONBody

// CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody defines body for CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost for application/json ContentType.
type CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONBody

// UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody defines body for UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut for application/json ContentType.
type UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAddressesApiV1AddressesGet request
	ListAddressesApiV1AddressesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAddressApiV1AddressesPost request  with any body
	CreateAddressApiV1AddressesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAddressApiV1AddressesPost(ctx context.Context, body CreateAddressApiV1AddressesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAddressByIdApiV1AddressesAddressIdDelete request
	DeleteAddressByIdApiV1AddressesAddressIdDelete(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAddressByIdApiV1AddressesAddressIdGet request
	RetrieveAddressByIdApiV1AddressesAddressIdGet(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAddressApiV1AddressesAddressIdPut request  with any body
	UpdateAddressApiV1AddressesAddressIdPutWithBody(ctx context.Context, addressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAddressApiV1AddressesAddressIdPut(ctx context.Context, addressId int, body UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLocationsApiV1LocationsGet request
	ListLocationsApiV1LocationsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLocationApiV1LocationsPost request  with any body
	CreateLocationApiV1LocationsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLocationApiV1LocationsPost(ctx context.Context, body CreateLocationApiV1LocationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocationByIdApiV1LocationsLocationIdDelete request
	DeleteLocationByIdApiV1LocationsLocationIdDelete(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveLocationByIdApiV1LocationsLocationIdGet request
	RetrieveLocationByIdApiV1LocationsLocationIdGet(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLocationApiV1LocationsLocationIdPut request  with any body
	UpdateLocationApiV1LocationsLocationIdPutWithBody(ctx context.Context, locationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLocationApiV1LocationsLocationIdPut(ctx context.Context, locationId int, body UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationsApiV1OrganizationsGet request
	ListOrganizationsApiV1OrganizationsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationApiV1OrganizationsPost request  with any body
	CreateOrganizationApiV1OrganizationsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationApiV1OrganizationsPost(ctx context.Context, body CreateOrganizationApiV1OrganizationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete request
	DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet request
	RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationApiV1OrganizationsOrganizationIdPut request  with any body
	UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBody(ctx context.Context, organizationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationApiV1OrganizationsOrganizationIdPut(ctx context.Context, organizationId int, body UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRequirementsApiV1RequirementsGet request
	ListRequirementsApiV1RequirementsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRequirementApiV1RequirementsPost request  with any body
	CreateRequirementApiV1RequirementsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRequirementApiV1RequirementsPost(ctx context.Context, body CreateRequirementApiV1RequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRequirementByIdApiV1RequirementsRequirementIdDelete request
	DeleteRequirementByIdApiV1RequirementsRequirementIdDelete(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveRequirementByIdApiV1RequirementsRequirementIdGet request
	RetrieveRequirementByIdApiV1RequirementsRequirementIdGet(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRequirementApiV1RequirementsRequirementIdPut request  with any body
	UpdateRequirementApiV1RequirementsRequirementIdPutWithBody(ctx context.Context, requirementId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRequirementApiV1RequirementsRequirementIdPut(ctx context.Context, requirementId int, body UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListVaccineAvailabilityApiV1VaccineAvailabilityGet request
	ListVaccineAvailabilityApiV1VaccineAvailabilityGet(ctx context.Context, params *ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVaccineAvailabilityApiV1VaccineAvailabilityPost request  with any body
	CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVaccineAvailabilityApiV1VaccineAvailabilityPost(ctx context.Context, body CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete request
	DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete(ctx context.Context, vaccineAvailabilityId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet request
	RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut request  with any body
	UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBody(ctx context.Context, vaccineAvailabilityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut(ctx context.Context, vaccineAvailabilityId int, body UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet request
	ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost request  with any body
	CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBody(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost(ctx context.Context, vaccineAvailabilityId string, body CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut request  with any body
	UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBody(ctx context.Context, vaccineAvailabilityId string, requirementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut(ctx context.Context, vaccineAvailabilityId string, requirementId string, body UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet request
	ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost request  with any body
	CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBody(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost(ctx context.Context, vaccineAvailabilityId string, body CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut request  with any body
	UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBody(ctx context.Context, vaccineAvailabilityId string, timeslotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut(ctx context.Context, vaccineAvailabilityId string, timeslotId string, body UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAddressesApiV1AddressesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAddressesApiV1AddressesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAddressApiV1AddressesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAddressApiV1AddressesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAddressApiV1AddressesPost(ctx context.Context, body CreateAddressApiV1AddressesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAddressApiV1AddressesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAddressByIdApiV1AddressesAddressIdDelete(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddressByIdApiV1AddressesAddressIdDeleteRequest(c.Server, addressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAddressByIdApiV1AddressesAddressIdGet(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAddressByIdApiV1AddressesAddressIdGetRequest(c.Server, addressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAddressApiV1AddressesAddressIdPutWithBody(ctx context.Context, addressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAddressApiV1AddressesAddressIdPutRequestWithBody(c.Server, addressId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAddressApiV1AddressesAddressIdPut(ctx context.Context, addressId int, body UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAddressApiV1AddressesAddressIdPutRequest(c.Server, addressId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLocationsApiV1LocationsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLocationsApiV1LocationsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocationApiV1LocationsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocationApiV1LocationsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocationApiV1LocationsPost(ctx context.Context, body CreateLocationApiV1LocationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocationApiV1LocationsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocationByIdApiV1LocationsLocationIdDelete(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocationByIdApiV1LocationsLocationIdDeleteRequest(c.Server, locationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveLocationByIdApiV1LocationsLocationIdGet(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveLocationByIdApiV1LocationsLocationIdGetRequest(c.Server, locationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocationApiV1LocationsLocationIdPutWithBody(ctx context.Context, locationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocationApiV1LocationsLocationIdPutRequestWithBody(c.Server, locationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocationApiV1LocationsLocationIdPut(ctx context.Context, locationId int, body UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocationApiV1LocationsLocationIdPutRequest(c.Server, locationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationsApiV1OrganizationsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsApiV1OrganizationsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationApiV1OrganizationsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationApiV1OrganizationsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationApiV1OrganizationsPost(ctx context.Context, body CreateOrganizationApiV1OrganizationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationApiV1OrganizationsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBody(ctx context.Context, organizationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationApiV1OrganizationsOrganizationIdPut(ctx context.Context, organizationId int, body UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRequirementsApiV1RequirementsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequirementsApiV1RequirementsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRequirementApiV1RequirementsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequirementApiV1RequirementsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRequirementApiV1RequirementsPost(ctx context.Context, body CreateRequirementApiV1RequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequirementApiV1RequirementsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRequirementByIdApiV1RequirementsRequirementIdDelete(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteRequest(c.Server, requirementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveRequirementByIdApiV1RequirementsRequirementIdGet(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveRequirementByIdApiV1RequirementsRequirementIdGetRequest(c.Server, requirementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequirementApiV1RequirementsRequirementIdPutWithBody(ctx context.Context, requirementId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequirementApiV1RequirementsRequirementIdPutRequestWithBody(c.Server, requirementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequirementApiV1RequirementsRequirementIdPut(ctx context.Context, requirementId int, body UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequirementApiV1RequirementsRequirementIdPutRequest(c.Server, requirementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListVaccineAvailabilityApiV1VaccineAvailabilityGet(ctx context.Context, params *ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListVaccineAvailabilityApiV1VaccineAvailabilityGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVaccineAvailabilityApiV1VaccineAvailabilityPost(ctx context.Context, body CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete(ctx context.Context, vaccineAvailabilityId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteRequest(c.Server, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetRequest(c.Server, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBody(ctx context.Context, vaccineAvailabilityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequestWithBody(c.Server, vaccineAvailabilityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut(ctx context.Context, vaccineAvailabilityId int, body UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequest(c.Server, vaccineAvailabilityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetRequest(c.Server, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBody(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequestWithBody(c.Server, vaccineAvailabilityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost(ctx context.Context, vaccineAvailabilityId string, body CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequest(c.Server, vaccineAvailabilityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBody(ctx context.Context, vaccineAvailabilityId string, requirementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequestWithBody(c.Server, vaccineAvailabilityId, requirementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut(ctx context.Context, vaccineAvailabilityId string, requirementId string, body UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequest(c.Server, vaccineAvailabilityId, requirementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetRequest(c.Server, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBody(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequestWithBody(c.Server, vaccineAvailabilityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost(ctx context.Context, vaccineAvailabilityId string, body CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequest(c.Server, vaccineAvailabilityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBody(ctx context.Context, vaccineAvailabilityId string, timeslotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequestWithBody(c.Server, vaccineAvailabilityId, timeslotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut(ctx context.Context, vaccineAvailabilityId string, timeslotId string, body UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequest(c.Server, vaccineAvailabilityId, timeslotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAddressesApiV1AddressesGetRequest generates requests for ListAddressesApiV1AddressesGet
func NewListAddressesApiV1AddressesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/addresses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAddressApiV1AddressesPostRequest calls the generic CreateAddressApiV1AddressesPost builder with application/json body
func NewCreateAddressApiV1AddressesPostRequest(server string, body CreateAddressApiV1AddressesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAddressApiV1AddressesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAddressApiV1AddressesPostRequestWithBody generates requests for CreateAddressApiV1AddressesPost with any type of body
func NewCreateAddressApiV1AddressesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/addresses")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAddressByIdApiV1AddressesAddressIdDeleteRequest generates requests for DeleteAddressByIdApiV1AddressesAddressIdDelete
func NewDeleteAddressByIdApiV1AddressesAddressIdDeleteRequest(server string, addressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveAddressByIdApiV1AddressesAddressIdGetRequest generates requests for RetrieveAddressByIdApiV1AddressesAddressIdGet
func NewRetrieveAddressByIdApiV1AddressesAddressIdGetRequest(server string, addressId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAddressApiV1AddressesAddressIdPutRequest calls the generic UpdateAddressApiV1AddressesAddressIdPut builder with application/json body
func NewUpdateAddressApiV1AddressesAddressIdPutRequest(server string, addressId int, body UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAddressApiV1AddressesAddressIdPutRequestWithBody(server, addressId, "application/json", bodyReader)
}

// NewUpdateAddressApiV1AddressesAddressIdPutRequestWithBody generates requests for UpdateAddressApiV1AddressesAddressIdPut with any type of body
func NewUpdateAddressApiV1AddressesAddressIdPutRequestWithBody(server string, addressId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address_id", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/addresses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListLocationsApiV1LocationsGetRequest generates requests for ListLocationsApiV1LocationsGet
func NewListLocationsApiV1LocationsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/locations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLocationApiV1LocationsPostRequest calls the generic CreateLocationApiV1LocationsPost builder with application/json body
func NewCreateLocationApiV1LocationsPostRequest(server string, body CreateLocationApiV1LocationsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLocationApiV1LocationsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLocationApiV1LocationsPostRequestWithBody generates requests for CreateLocationApiV1LocationsPost with any type of body
func NewCreateLocationApiV1LocationsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/locations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocationByIdApiV1LocationsLocationIdDeleteRequest generates requests for DeleteLocationByIdApiV1LocationsLocationIdDelete
func NewDeleteLocationByIdApiV1LocationsLocationIdDeleteRequest(server string, locationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveLocationByIdApiV1LocationsLocationIdGetRequest generates requests for RetrieveLocationByIdApiV1LocationsLocationIdGet
func NewRetrieveLocationByIdApiV1LocationsLocationIdGetRequest(server string, locationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLocationApiV1LocationsLocationIdPutRequest calls the generic UpdateLocationApiV1LocationsLocationIdPut builder with application/json body
func NewUpdateLocationApiV1LocationsLocationIdPutRequest(server string, locationId int, body UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLocationApiV1LocationsLocationIdPutRequestWithBody(server, locationId, "application/json", bodyReader)
}

// NewUpdateLocationApiV1LocationsLocationIdPutRequestWithBody generates requests for UpdateLocationApiV1LocationsLocationIdPut with any type of body
func NewUpdateLocationApiV1LocationsLocationIdPutRequestWithBody(server string, locationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location_id", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationsApiV1OrganizationsGetRequest generates requests for ListOrganizationsApiV1OrganizationsGet
func NewListOrganizationsApiV1OrganizationsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationApiV1OrganizationsPostRequest calls the generic CreateOrganizationApiV1OrganizationsPost builder with application/json body
func NewCreateOrganizationApiV1OrganizationsPostRequest(server string, body CreateOrganizationApiV1OrganizationsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationApiV1OrganizationsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationApiV1OrganizationsPostRequestWithBody generates requests for CreateOrganizationApiV1OrganizationsPost with any type of body
func NewCreateOrganizationApiV1OrganizationsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteRequest generates requests for DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete
func NewDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteRequest(server string, organizationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetRequest generates requests for RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet
func NewRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetRequest(server string, organizationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequest calls the generic UpdateOrganizationApiV1OrganizationsOrganizationIdPut builder with application/json body
func NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequest(server string, organizationId int, body UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequestWithBody generates requests for UpdateOrganizationApiV1OrganizationsOrganizationIdPut with any type of body
func NewUpdateOrganizationApiV1OrganizationsOrganizationIdPutRequestWithBody(server string, organizationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization_id", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRequirementsApiV1RequirementsGetRequest generates requests for ListRequirementsApiV1RequirementsGet
func NewListRequirementsApiV1RequirementsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requirements")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequirementApiV1RequirementsPostRequest calls the generic CreateRequirementApiV1RequirementsPost builder with application/json body
func NewCreateRequirementApiV1RequirementsPostRequest(server string, body CreateRequirementApiV1RequirementsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequirementApiV1RequirementsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRequirementApiV1RequirementsPostRequestWithBody generates requests for CreateRequirementApiV1RequirementsPost with any type of body
func NewCreateRequirementApiV1RequirementsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requirements")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteRequest generates requests for DeleteRequirementByIdApiV1RequirementsRequirementIdDelete
func NewDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteRequest(server string, requirementId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requirement_id", runtime.ParamLocationPath, requirementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requirements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveRequirementByIdApiV1RequirementsRequirementIdGetRequest generates requests for RetrieveRequirementByIdApiV1RequirementsRequirementIdGet
func NewRetrieveRequirementByIdApiV1RequirementsRequirementIdGetRequest(server string, requirementId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requirement_id", runtime.ParamLocationPath, requirementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requirements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequirementApiV1RequirementsRequirementIdPutRequest calls the generic UpdateRequirementApiV1RequirementsRequirementIdPut builder with application/json body
func NewUpdateRequirementApiV1RequirementsRequirementIdPutRequest(server string, requirementId int, body UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequirementApiV1RequirementsRequirementIdPutRequestWithBody(server, requirementId, "application/json", bodyReader)
}

// NewUpdateRequirementApiV1RequirementsRequirementIdPutRequestWithBody generates requests for UpdateRequirementApiV1RequirementsRequirementIdPut with any type of body
func NewUpdateRequirementApiV1RequirementsRequirementIdPutRequestWithBody(server string, requirementId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requirement_id", runtime.ParamLocationPath, requirementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requirements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListVaccineAvailabilityApiV1VaccineAvailabilityGetRequest generates requests for ListVaccineAvailabilityApiV1VaccineAvailabilityGet
func NewListVaccineAvailabilityApiV1VaccineAvailabilityGetRequest(server string, params *ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.MinDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_date", runtime.ParamLocationQuery, *params.MinDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "postal_code", runtime.ParamLocationQuery, params.PostalCode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequest calls the generic CreateVaccineAvailabilityApiV1VaccineAvailabilityPost builder with application/json body
func NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequest(server string, body CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequestWithBody generates requests for CreateVaccineAvailabilityApiV1VaccineAvailabilityPost with any type of body
func NewCreateVaccineAvailabilityApiV1VaccineAvailabilityPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteRequest generates requests for DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete
func NewDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteRequest(server string, vaccineAvailabilityId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetRequest generates requests for RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet
func NewRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetRequest(server string, vaccineAvailabilityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequest calls the generic UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut builder with application/json body
func NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequest(server string, vaccineAvailabilityId int, body UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequestWithBody(server, vaccineAvailabilityId, "application/json", bodyReader)
}

// NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequestWithBody generates requests for UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut with any type of body
func NewUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutRequestWithBody(server string, vaccineAvailabilityId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetRequest generates requests for ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet
func NewListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetRequest(server string, vaccineAvailabilityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/requirements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequest calls the generic CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost builder with application/json body
func NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequest(server string, vaccineAvailabilityId string, body CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequestWithBody(server, vaccineAvailabilityId, "application/json", bodyReader)
}

// NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequestWithBody generates requests for CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost with any type of body
func NewCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostRequestWithBody(server string, vaccineAvailabilityId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/requirements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequest calls the generic UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut builder with application/json body
func NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequest(server string, vaccineAvailabilityId string, requirementId string, body UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequestWithBody(server, vaccineAvailabilityId, requirementId, "application/json", bodyReader)
}

// NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequestWithBody generates requests for UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut with any type of body
func NewUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutRequestWithBody(server string, vaccineAvailabilityId string, requirementId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "requirement_id", runtime.ParamLocationPath, requirementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/requirements/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetRequest generates requests for ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet
func NewListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetRequest(server string, vaccineAvailabilityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/timeslots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequest calls the generic CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost builder with application/json body
func NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequest(server string, vaccineAvailabilityId string, body CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequestWithBody(server, vaccineAvailabilityId, "application/json", bodyReader)
}

// NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequestWithBody generates requests for CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost with any type of body
func NewCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostRequestWithBody(server string, vaccineAvailabilityId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/timeslots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequest calls the generic UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut builder with application/json body
func NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequest(server string, vaccineAvailabilityId string, timeslotId string, body UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequestWithBody(server, vaccineAvailabilityId, timeslotId, "application/json", bodyReader)
}

// NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequestWithBody generates requests for UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut with any type of body
func NewUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutRequestWithBody(server string, vaccineAvailabilityId string, timeslotId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaccine_availability_id", runtime.ParamLocationPath, vaccineAvailabilityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "timeslot_id", runtime.ParamLocationPath, timeslotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/vaccine-availability/%s/timeslots/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAddressesApiV1AddressesGet request
	ListAddressesApiV1AddressesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAddressesApiV1AddressesGetResponse, error)

	// CreateAddressApiV1AddressesPost request  with any body
	CreateAddressApiV1AddressesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddressApiV1AddressesPostResponse, error)

	CreateAddressApiV1AddressesPostWithResponse(ctx context.Context, body CreateAddressApiV1AddressesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAddressApiV1AddressesPostResponse, error)

	// DeleteAddressByIdApiV1AddressesAddressIdDelete request
	DeleteAddressByIdApiV1AddressesAddressIdDeleteWithResponse(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse, error)

	// RetrieveAddressByIdApiV1AddressesAddressIdGet request
	RetrieveAddressByIdApiV1AddressesAddressIdGetWithResponse(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*RetrieveAddressByIdApiV1AddressesAddressIdGetResponse, error)

	// UpdateAddressApiV1AddressesAddressIdPut request  with any body
	UpdateAddressApiV1AddressesAddressIdPutWithBodyWithResponse(ctx context.Context, addressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddressApiV1AddressesAddressIdPutResponse, error)

	UpdateAddressApiV1AddressesAddressIdPutWithResponse(ctx context.Context, addressId int, body UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAddressApiV1AddressesAddressIdPutResponse, error)

	// ListLocationsApiV1LocationsGet request
	ListLocationsApiV1LocationsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsApiV1LocationsGetResponse, error)

	// CreateLocationApiV1LocationsPost request  with any body
	CreateLocationApiV1LocationsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocationApiV1LocationsPostResponse, error)

	CreateLocationApiV1LocationsPostWithResponse(ctx context.Context, body CreateLocationApiV1LocationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocationApiV1LocationsPostResponse, error)

	// DeleteLocationByIdApiV1LocationsLocationIdDelete request
	DeleteLocationByIdApiV1LocationsLocationIdDeleteWithResponse(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse, error)

	// RetrieveLocationByIdApiV1LocationsLocationIdGet request
	RetrieveLocationByIdApiV1LocationsLocationIdGetWithResponse(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*RetrieveLocationByIdApiV1LocationsLocationIdGetResponse, error)

	// UpdateLocationApiV1LocationsLocationIdPut request  with any body
	UpdateLocationApiV1LocationsLocationIdPutWithBodyWithResponse(ctx context.Context, locationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocationApiV1LocationsLocationIdPutResponse, error)

	UpdateLocationApiV1LocationsLocationIdPutWithResponse(ctx context.Context, locationId int, body UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocationApiV1LocationsLocationIdPutResponse, error)

	// ListOrganizationsApiV1OrganizationsGet request
	ListOrganizationsApiV1OrganizationsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsApiV1OrganizationsGetResponse, error)

	// CreateOrganizationApiV1OrganizationsPost request  with any body
	CreateOrganizationApiV1OrganizationsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationApiV1OrganizationsPostResponse, error)

	CreateOrganizationApiV1OrganizationsPostWithResponse(ctx context.Context, body CreateOrganizationApiV1OrganizationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationApiV1OrganizationsPostResponse, error)

	// DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete request
	DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteWithResponse(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse, error)

	// RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet request
	RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetWithResponse(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse, error)

	// UpdateOrganizationApiV1OrganizationsOrganizationIdPut request  with any body
	UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBodyWithResponse(ctx context.Context, organizationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, error)

	UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithResponse(ctx context.Context, organizationId int, body UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, error)

	// ListRequirementsApiV1RequirementsGet request
	ListRequirementsApiV1RequirementsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRequirementsApiV1RequirementsGetResponse, error)

	// CreateRequirementApiV1RequirementsPost request  with any body
	CreateRequirementApiV1RequirementsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRequirementApiV1RequirementsPostResponse, error)

	CreateRequirementApiV1RequirementsPostWithResponse(ctx context.Context, body CreateRequirementApiV1RequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRequirementApiV1RequirementsPostResponse, error)

	// DeleteRequirementByIdApiV1RequirementsRequirementIdDelete request
	DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteWithResponse(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse, error)

	// RetrieveRequirementByIdApiV1RequirementsRequirementIdGet request
	RetrieveRequirementByIdApiV1RequirementsRequirementIdGetWithResponse(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse, error)

	// UpdateRequirementApiV1RequirementsRequirementIdPut request  with any body
	UpdateRequirementApiV1RequirementsRequirementIdPutWithBodyWithResponse(ctx context.Context, requirementId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequirementApiV1RequirementsRequirementIdPutResponse, error)

	UpdateRequirementApiV1RequirementsRequirementIdPutWithResponse(ctx context.Context, requirementId int, body UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequirementApiV1RequirementsRequirementIdPutResponse, error)

	// ListVaccineAvailabilityApiV1VaccineAvailabilityGet request
	ListVaccineAvailabilityApiV1VaccineAvailabilityGetWithResponse(ctx context.Context, params *ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams, reqEditors ...RequestEditorFn) (*ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse, error)

	// CreateVaccineAvailabilityApiV1VaccineAvailabilityPost request  with any body
	CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse, error)

	CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithResponse(ctx context.Context, body CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse, error)

	// DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete request
	DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteWithResponse(ctx context.Context, vaccineAvailabilityId int, reqEditors ...RequestEditorFn) (*DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse, error)

	// RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet request
	RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse, error)

	// UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut request  with any body
	UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse, error)

	UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithResponse(ctx context.Context, vaccineAvailabilityId int, body UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse, error)

	// ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet request
	ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse, error)

	// CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost request  with any body
	CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse, error)

	CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithResponse(ctx context.Context, vaccineAvailabilityId string, body CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse, error)

	// UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut request  with any body
	UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, requirementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse, error)

	UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithResponse(ctx context.Context, vaccineAvailabilityId string, requirementId string, body UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse, error)

	// ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet request
	ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse, error)

	// CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost request  with any body
	CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse, error)

	CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithResponse(ctx context.Context, vaccineAvailabilityId string, body CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse, error)

	// UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut request  with any body
	UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, timeslotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse, error)

	UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithResponse(ctx context.Context, vaccineAvailabilityId string, timeslotId string, body UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse, error)
}

type ListAddressesApiV1AddressesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AddressResponse
}

// Status returns HTTPResponse.Status
func (r ListAddressesApiV1AddressesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAddressesApiV1AddressesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAddressApiV1AddressesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateAddressApiV1AddressesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAddressApiV1AddressesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAddressByIdApiV1AddressesAddressIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RetrieveAddressByIdApiV1AddressesAddressIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAddressByIdApiV1AddressesAddressIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAddressApiV1AddressesAddressIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateAddressApiV1AddressesAddressIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAddressApiV1AddressesAddressIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLocationsApiV1LocationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LocationExpandedResponse
}

// Status returns HTTPResponse.Status
func (r ListLocationsApiV1LocationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsApiV1LocationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLocationApiV1LocationsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateLocationApiV1LocationsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLocationApiV1LocationsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveLocationByIdApiV1LocationsLocationIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationExpandedResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RetrieveLocationByIdApiV1LocationsLocationIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveLocationByIdApiV1LocationsLocationIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLocationApiV1LocationsLocationIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateLocationApiV1LocationsLocationIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLocationApiV1LocationsLocationIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsApiV1OrganizationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsApiV1OrganizationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsApiV1OrganizationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationApiV1OrganizationsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationApiV1OrganizationsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationApiV1OrganizationsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRequirementsApiV1RequirementsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RequirementResponse
}

// Status returns HTTPResponse.Status
func (r ListRequirementsApiV1RequirementsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRequirementsApiV1RequirementsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRequirementApiV1RequirementsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequirementResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateRequirementApiV1RequirementsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRequirementApiV1RequirementsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequirementResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRequirementApiV1RequirementsRequirementIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequirementResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateRequirementApiV1RequirementsRequirementIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRequirementApiV1RequirementsRequirementIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VaccineAvailabilityExpandedResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityExpandedResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VaccineAvailabilityRequirementsResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityRequirementsResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityRequirementsResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VaccineAvailabilityTimeslotResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityTimeslotResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaccineAvailabilityTimeslotResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAddressesApiV1AddressesGetWithResponse request returning *ListAddressesApiV1AddressesGetResponse
func (c *ClientWithResponses) ListAddressesApiV1AddressesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAddressesApiV1AddressesGetResponse, error) {
	rsp, err := c.ListAddressesApiV1AddressesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAddressesApiV1AddressesGetResponse(rsp)
}

// CreateAddressApiV1AddressesPostWithBodyWithResponse request with arbitrary body returning *CreateAddressApiV1AddressesPostResponse
func (c *ClientWithResponses) CreateAddressApiV1AddressesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddressApiV1AddressesPostResponse, error) {
	rsp, err := c.CreateAddressApiV1AddressesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAddressApiV1AddressesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateAddressApiV1AddressesPostWithResponse(ctx context.Context, body CreateAddressApiV1AddressesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAddressApiV1AddressesPostResponse, error) {
	rsp, err := c.CreateAddressApiV1AddressesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAddressApiV1AddressesPostResponse(rsp)
}

// DeleteAddressByIdApiV1AddressesAddressIdDeleteWithResponse request returning *DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse
func (c *ClientWithResponses) DeleteAddressByIdApiV1AddressesAddressIdDeleteWithResponse(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse, error) {
	rsp, err := c.DeleteAddressByIdApiV1AddressesAddressIdDelete(ctx, addressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddressByIdApiV1AddressesAddressIdDeleteResponse(rsp)
}

// RetrieveAddressByIdApiV1AddressesAddressIdGetWithResponse request returning *RetrieveAddressByIdApiV1AddressesAddressIdGetResponse
func (c *ClientWithResponses) RetrieveAddressByIdApiV1AddressesAddressIdGetWithResponse(ctx context.Context, addressId int, reqEditors ...RequestEditorFn) (*RetrieveAddressByIdApiV1AddressesAddressIdGetResponse, error) {
	rsp, err := c.RetrieveAddressByIdApiV1AddressesAddressIdGet(ctx, addressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAddressByIdApiV1AddressesAddressIdGetResponse(rsp)
}

// UpdateAddressApiV1AddressesAddressIdPutWithBodyWithResponse request with arbitrary body returning *UpdateAddressApiV1AddressesAddressIdPutResponse
func (c *ClientWithResponses) UpdateAddressApiV1AddressesAddressIdPutWithBodyWithResponse(ctx context.Context, addressId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddressApiV1AddressesAddressIdPutResponse, error) {
	rsp, err := c.UpdateAddressApiV1AddressesAddressIdPutWithBody(ctx, addressId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAddressApiV1AddressesAddressIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateAddressApiV1AddressesAddressIdPutWithResponse(ctx context.Context, addressId int, body UpdateAddressApiV1AddressesAddressIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAddressApiV1AddressesAddressIdPutResponse, error) {
	rsp, err := c.UpdateAddressApiV1AddressesAddressIdPut(ctx, addressId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAddressApiV1AddressesAddressIdPutResponse(rsp)
}

// ListLocationsApiV1LocationsGetWithResponse request returning *ListLocationsApiV1LocationsGetResponse
func (c *ClientWithResponses) ListLocationsApiV1LocationsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsApiV1LocationsGetResponse, error) {
	rsp, err := c.ListLocationsApiV1LocationsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsApiV1LocationsGetResponse(rsp)
}

// CreateLocationApiV1LocationsPostWithBodyWithResponse request with arbitrary body returning *CreateLocationApiV1LocationsPostResponse
func (c *ClientWithResponses) CreateLocationApiV1LocationsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocationApiV1LocationsPostResponse, error) {
	rsp, err := c.CreateLocationApiV1LocationsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocationApiV1LocationsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateLocationApiV1LocationsPostWithResponse(ctx context.Context, body CreateLocationApiV1LocationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocationApiV1LocationsPostResponse, error) {
	rsp, err := c.CreateLocationApiV1LocationsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocationApiV1LocationsPostResponse(rsp)
}

// DeleteLocationByIdApiV1LocationsLocationIdDeleteWithResponse request returning *DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse
func (c *ClientWithResponses) DeleteLocationByIdApiV1LocationsLocationIdDeleteWithResponse(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse, error) {
	rsp, err := c.DeleteLocationByIdApiV1LocationsLocationIdDelete(ctx, locationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocationByIdApiV1LocationsLocationIdDeleteResponse(rsp)
}

// RetrieveLocationByIdApiV1LocationsLocationIdGetWithResponse request returning *RetrieveLocationByIdApiV1LocationsLocationIdGetResponse
func (c *ClientWithResponses) RetrieveLocationByIdApiV1LocationsLocationIdGetWithResponse(ctx context.Context, locationId int, reqEditors ...RequestEditorFn) (*RetrieveLocationByIdApiV1LocationsLocationIdGetResponse, error) {
	rsp, err := c.RetrieveLocationByIdApiV1LocationsLocationIdGet(ctx, locationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveLocationByIdApiV1LocationsLocationIdGetResponse(rsp)
}

// UpdateLocationApiV1LocationsLocationIdPutWithBodyWithResponse request with arbitrary body returning *UpdateLocationApiV1LocationsLocationIdPutResponse
func (c *ClientWithResponses) UpdateLocationApiV1LocationsLocationIdPutWithBodyWithResponse(ctx context.Context, locationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocationApiV1LocationsLocationIdPutResponse, error) {
	rsp, err := c.UpdateLocationApiV1LocationsLocationIdPutWithBody(ctx, locationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocationApiV1LocationsLocationIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateLocationApiV1LocationsLocationIdPutWithResponse(ctx context.Context, locationId int, body UpdateLocationApiV1LocationsLocationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocationApiV1LocationsLocationIdPutResponse, error) {
	rsp, err := c.UpdateLocationApiV1LocationsLocationIdPut(ctx, locationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocationApiV1LocationsLocationIdPutResponse(rsp)
}

// ListOrganizationsApiV1OrganizationsGetWithResponse request returning *ListOrganizationsApiV1OrganizationsGetResponse
func (c *ClientWithResponses) ListOrganizationsApiV1OrganizationsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListOrganizationsApiV1OrganizationsGetResponse, error) {
	rsp, err := c.ListOrganizationsApiV1OrganizationsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsApiV1OrganizationsGetResponse(rsp)
}

// CreateOrganizationApiV1OrganizationsPostWithBodyWithResponse request with arbitrary body returning *CreateOrganizationApiV1OrganizationsPostResponse
func (c *ClientWithResponses) CreateOrganizationApiV1OrganizationsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationApiV1OrganizationsPostResponse, error) {
	rsp, err := c.CreateOrganizationApiV1OrganizationsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationApiV1OrganizationsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationApiV1OrganizationsPostWithResponse(ctx context.Context, body CreateOrganizationApiV1OrganizationsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationApiV1OrganizationsPostResponse, error) {
	rsp, err := c.CreateOrganizationApiV1OrganizationsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationApiV1OrganizationsPostResponse(rsp)
}

// DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteWithResponse request returning *DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse
func (c *ClientWithResponses) DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteWithResponse(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse, error) {
	rsp, err := c.DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDelete(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse(rsp)
}

// RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetWithResponse request returning *RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse
func (c *ClientWithResponses) RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetWithResponse(ctx context.Context, organizationId int, reqEditors ...RequestEditorFn) (*RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse, error) {
	rsp, err := c.RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGet(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse(rsp)
}

// UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse
func (c *ClientWithResponses) UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBodyWithResponse(ctx context.Context, organizationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, error) {
	rsp, err := c.UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithResponse(ctx context.Context, organizationId int, body UpdateOrganizationApiV1OrganizationsOrganizationIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, error) {
	rsp, err := c.UpdateOrganizationApiV1OrganizationsOrganizationIdPut(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse(rsp)
}

// ListRequirementsApiV1RequirementsGetWithResponse request returning *ListRequirementsApiV1RequirementsGetResponse
func (c *ClientWithResponses) ListRequirementsApiV1RequirementsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRequirementsApiV1RequirementsGetResponse, error) {
	rsp, err := c.ListRequirementsApiV1RequirementsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRequirementsApiV1RequirementsGetResponse(rsp)
}

// CreateRequirementApiV1RequirementsPostWithBodyWithResponse request with arbitrary body returning *CreateRequirementApiV1RequirementsPostResponse
func (c *ClientWithResponses) CreateRequirementApiV1RequirementsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRequirementApiV1RequirementsPostResponse, error) {
	rsp, err := c.CreateRequirementApiV1RequirementsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRequirementApiV1RequirementsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateRequirementApiV1RequirementsPostWithResponse(ctx context.Context, body CreateRequirementApiV1RequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRequirementApiV1RequirementsPostResponse, error) {
	rsp, err := c.CreateRequirementApiV1RequirementsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRequirementApiV1RequirementsPostResponse(rsp)
}

// DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteWithResponse request returning *DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse
func (c *ClientWithResponses) DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteWithResponse(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse, error) {
	rsp, err := c.DeleteRequirementByIdApiV1RequirementsRequirementIdDelete(ctx, requirementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse(rsp)
}

// RetrieveRequirementByIdApiV1RequirementsRequirementIdGetWithResponse request returning *RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse
func (c *ClientWithResponses) RetrieveRequirementByIdApiV1RequirementsRequirementIdGetWithResponse(ctx context.Context, requirementId int, reqEditors ...RequestEditorFn) (*RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse, error) {
	rsp, err := c.RetrieveRequirementByIdApiV1RequirementsRequirementIdGet(ctx, requirementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse(rsp)
}

// UpdateRequirementApiV1RequirementsRequirementIdPutWithBodyWithResponse request with arbitrary body returning *UpdateRequirementApiV1RequirementsRequirementIdPutResponse
func (c *ClientWithResponses) UpdateRequirementApiV1RequirementsRequirementIdPutWithBodyWithResponse(ctx context.Context, requirementId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequirementApiV1RequirementsRequirementIdPutResponse, error) {
	rsp, err := c.UpdateRequirementApiV1RequirementsRequirementIdPutWithBody(ctx, requirementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequirementApiV1RequirementsRequirementIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateRequirementApiV1RequirementsRequirementIdPutWithResponse(ctx context.Context, requirementId int, body UpdateRequirementApiV1RequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequirementApiV1RequirementsRequirementIdPutResponse, error) {
	rsp, err := c.UpdateRequirementApiV1RequirementsRequirementIdPut(ctx, requirementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequirementApiV1RequirementsRequirementIdPutResponse(rsp)
}

// ListVaccineAvailabilityApiV1VaccineAvailabilityGetWithResponse request returning *ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse
func (c *ClientWithResponses) ListVaccineAvailabilityApiV1VaccineAvailabilityGetWithResponse(ctx context.Context, params *ListVaccineAvailabilityApiV1VaccineAvailabilityGetParams, reqEditors ...RequestEditorFn) (*ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse, error) {
	rsp, err := c.ListVaccineAvailabilityApiV1VaccineAvailabilityGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse(rsp)
}

// CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBodyWithResponse request with arbitrary body returning *CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse
func (c *ClientWithResponses) CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse, error) {
	rsp, err := c.CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse(rsp)
}

func (c *ClientWithResponses) CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithResponse(ctx context.Context, body CreateVaccineAvailabilityApiV1VaccineAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse, error) {
	rsp, err := c.CreateVaccineAvailabilityApiV1VaccineAvailabilityPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse(rsp)
}

// DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteWithResponse request returning *DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse
func (c *ClientWithResponses) DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteWithResponse(ctx context.Context, vaccineAvailabilityId int, reqEditors ...RequestEditorFn) (*DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse, error) {
	rsp, err := c.DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDelete(ctx, vaccineAvailabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse(rsp)
}

// RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetWithResponse request returning *RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse
func (c *ClientWithResponses) RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse, error) {
	rsp, err := c.RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGet(ctx, vaccineAvailabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse(rsp)
}

// UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBodyWithResponse request with arbitrary body returning *UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse
func (c *ClientWithResponses) UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse, error) {
	rsp, err := c.UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithBody(ctx, vaccineAvailabilityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithResponse(ctx context.Context, vaccineAvailabilityId int, body UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse, error) {
	rsp, err := c.UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPut(ctx, vaccineAvailabilityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse(rsp)
}

// ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetWithResponse request returning *ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse
func (c *ClientWithResponses) ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse, error) {
	rsp, err := c.ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGet(ctx, vaccineAvailabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse(rsp)
}

// CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBodyWithResponse request with arbitrary body returning *CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse
func (c *ClientWithResponses) CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse, error) {
	rsp, err := c.CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithBody(ctx, vaccineAvailabilityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithResponse(ctx context.Context, vaccineAvailabilityId string, body CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse, error) {
	rsp, err := c.CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPost(ctx, vaccineAvailabilityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse(rsp)
}

// UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBodyWithResponse request with arbitrary body returning *UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse
func (c *ClientWithResponses) UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, requirementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse, error) {
	rsp, err := c.UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithBody(ctx, vaccineAvailabilityId, requirementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithResponse(ctx context.Context, vaccineAvailabilityId string, requirementId string, body UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse, error) {
	rsp, err := c.UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPut(ctx, vaccineAvailabilityId, requirementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse(rsp)
}

// ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetWithResponse request returning *ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse
func (c *ClientWithResponses) ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetWithResponse(ctx context.Context, vaccineAvailabilityId string, reqEditors ...RequestEditorFn) (*ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse, error) {
	rsp, err := c.ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGet(ctx, vaccineAvailabilityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse(rsp)
}

// CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBodyWithResponse request with arbitrary body returning *CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse
func (c *ClientWithResponses) CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse, error) {
	rsp, err := c.CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithBody(ctx, vaccineAvailabilityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithResponse(ctx context.Context, vaccineAvailabilityId string, body CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse, error) {
	rsp, err := c.CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPost(ctx, vaccineAvailabilityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse(rsp)
}

// UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBodyWithResponse request with arbitrary body returning *UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse
func (c *ClientWithResponses) UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBodyWithResponse(ctx context.Context, vaccineAvailabilityId string, timeslotId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse, error) {
	rsp, err := c.UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithBody(ctx, vaccineAvailabilityId, timeslotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithResponse(ctx context.Context, vaccineAvailabilityId string, timeslotId string, body UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse, error) {
	rsp, err := c.UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPut(ctx, vaccineAvailabilityId, timeslotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse(rsp)
}

// ParseListAddressesApiV1AddressesGetResponse parses an HTTP response from a ListAddressesApiV1AddressesGetWithResponse call
func ParseListAddressesApiV1AddressesGetResponse(rsp *http.Response) (*ListAddressesApiV1AddressesGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAddressesApiV1AddressesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAddressApiV1AddressesPostResponse parses an HTTP response from a CreateAddressApiV1AddressesPostWithResponse call
func ParseCreateAddressApiV1AddressesPostResponse(rsp *http.Response) (*CreateAddressApiV1AddressesPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAddressApiV1AddressesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteAddressByIdApiV1AddressesAddressIdDeleteResponse parses an HTTP response from a DeleteAddressByIdApiV1AddressesAddressIdDeleteWithResponse call
func ParseDeleteAddressByIdApiV1AddressesAddressIdDeleteResponse(rsp *http.Response) (*DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddressByIdApiV1AddressesAddressIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRetrieveAddressByIdApiV1AddressesAddressIdGetResponse parses an HTTP response from a RetrieveAddressByIdApiV1AddressesAddressIdGetWithResponse call
func ParseRetrieveAddressByIdApiV1AddressesAddressIdGetResponse(rsp *http.Response) (*RetrieveAddressByIdApiV1AddressesAddressIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAddressByIdApiV1AddressesAddressIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateAddressApiV1AddressesAddressIdPutResponse parses an HTTP response from a UpdateAddressApiV1AddressesAddressIdPutWithResponse call
func ParseUpdateAddressApiV1AddressesAddressIdPutResponse(rsp *http.Response) (*UpdateAddressApiV1AddressesAddressIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAddressApiV1AddressesAddressIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListLocationsApiV1LocationsGetResponse parses an HTTP response from a ListLocationsApiV1LocationsGetWithResponse call
func ParseListLocationsApiV1LocationsGetResponse(rsp *http.Response) (*ListLocationsApiV1LocationsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsApiV1LocationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LocationExpandedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLocationApiV1LocationsPostResponse parses an HTTP response from a CreateLocationApiV1LocationsPostWithResponse call
func ParseCreateLocationApiV1LocationsPostResponse(rsp *http.Response) (*CreateLocationApiV1LocationsPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateLocationApiV1LocationsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteLocationByIdApiV1LocationsLocationIdDeleteResponse parses an HTTP response from a DeleteLocationByIdApiV1LocationsLocationIdDeleteWithResponse call
func ParseDeleteLocationByIdApiV1LocationsLocationIdDeleteResponse(rsp *http.Response) (*DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocationByIdApiV1LocationsLocationIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRetrieveLocationByIdApiV1LocationsLocationIdGetResponse parses an HTTP response from a RetrieveLocationByIdApiV1LocationsLocationIdGetWithResponse call
func ParseRetrieveLocationByIdApiV1LocationsLocationIdGetResponse(rsp *http.Response) (*RetrieveLocationByIdApiV1LocationsLocationIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RetrieveLocationByIdApiV1LocationsLocationIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationExpandedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateLocationApiV1LocationsLocationIdPutResponse parses an HTTP response from a UpdateLocationApiV1LocationsLocationIdPutWithResponse call
func ParseUpdateLocationApiV1LocationsLocationIdPutResponse(rsp *http.Response) (*UpdateLocationApiV1LocationsLocationIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateLocationApiV1LocationsLocationIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListOrganizationsApiV1OrganizationsGetResponse parses an HTTP response from a ListOrganizationsApiV1OrganizationsGetWithResponse call
func ParseListOrganizationsApiV1OrganizationsGetResponse(rsp *http.Response) (*ListOrganizationsApiV1OrganizationsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsApiV1OrganizationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationApiV1OrganizationsPostResponse parses an HTTP response from a CreateOrganizationApiV1OrganizationsPostWithResponse call
func ParseCreateOrganizationApiV1OrganizationsPostResponse(rsp *http.Response) (*CreateOrganizationApiV1OrganizationsPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationApiV1OrganizationsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse parses an HTTP response from a DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteWithResponse call
func ParseDeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse(rsp *http.Response) (*DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationByIdApiV1OrganizationsOrganizationIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse parses an HTTP response from a RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetWithResponse call
func ParseRetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse(rsp *http.Response) (*RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RetrieveOrganizationByIdApiV1OrganizationsOrganizationIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse parses an HTTP response from a UpdateOrganizationApiV1OrganizationsOrganizationIdPutWithResponse call
func ParseUpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse(rsp *http.Response) (*UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListRequirementsApiV1RequirementsGetResponse parses an HTTP response from a ListRequirementsApiV1RequirementsGetWithResponse call
func ParseListRequirementsApiV1RequirementsGetResponse(rsp *http.Response) (*ListRequirementsApiV1RequirementsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRequirementsApiV1RequirementsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RequirementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRequirementApiV1RequirementsPostResponse parses an HTTP response from a CreateRequirementApiV1RequirementsPostWithResponse call
func ParseCreateRequirementApiV1RequirementsPostResponse(rsp *http.Response) (*CreateRequirementApiV1RequirementsPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateRequirementApiV1RequirementsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequirementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse parses an HTTP response from a DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteWithResponse call
func ParseDeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse(rsp *http.Response) (*DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteRequirementByIdApiV1RequirementsRequirementIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse parses an HTTP response from a RetrieveRequirementByIdApiV1RequirementsRequirementIdGetWithResponse call
func ParseRetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse(rsp *http.Response) (*RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RetrieveRequirementByIdApiV1RequirementsRequirementIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequirementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateRequirementApiV1RequirementsRequirementIdPutResponse parses an HTTP response from a UpdateRequirementApiV1RequirementsRequirementIdPutWithResponse call
func ParseUpdateRequirementApiV1RequirementsRequirementIdPutResponse(rsp *http.Response) (*UpdateRequirementApiV1RequirementsRequirementIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateRequirementApiV1RequirementsRequirementIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequirementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse parses an HTTP response from a ListVaccineAvailabilityApiV1VaccineAvailabilityGetWithResponse call
func ParseListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse(rsp *http.Response) (*ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListVaccineAvailabilityApiV1VaccineAvailabilityGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VaccineAvailabilityExpandedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse parses an HTTP response from a CreateVaccineAvailabilityApiV1VaccineAvailabilityPostWithResponse call
func ParseCreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse(rsp *http.Response) (*CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateVaccineAvailabilityApiV1VaccineAvailabilityPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse parses an HTTP response from a DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteWithResponse call
func ParseDeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse(rsp *http.Response) (*DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse parses an HTTP response from a RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetWithResponse call
func ParseRetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse(rsp *http.Response) (*RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RetrieveVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityExpandedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse parses an HTTP response from a UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutWithResponse call
func ParseUpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse(rsp *http.Response) (*UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateVaccineAvailabilityApiV1VaccineAvailabilityVaccineAvailabilityIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse parses an HTTP response from a ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetWithResponse call
func ParseListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse(rsp *http.Response) (*ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRequirementsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VaccineAvailabilityRequirementsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse parses an HTTP response from a CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostWithResponse call
func ParseCreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse(rsp *http.Response) (*CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityRequirementsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse parses an HTTP response from a UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutWithResponse call
func ParseUpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse(rsp *http.Response) (*UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateRequirementForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdRequirementsRequirementIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityRequirementsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse parses an HTTP response from a ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetWithResponse call
func ParseListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse(rsp *http.Response) (*ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListTimeslotsForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VaccineAvailabilityTimeslotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse parses an HTTP response from a CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostWithResponse call
func ParseCreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse(rsp *http.Response) (*CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityTimeslotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse parses an HTTP response from a UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutWithResponse call
func ParseUpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse(rsp *http.Response) (*UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTimeslotForVaccineAvailabilityByIdApiV1VaccineAvailabilityVaccineAvailabilityIdTimeslotsTimeslotIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaccineAvailabilityTimeslotResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
