# Workflow to release a new version
name: Build and Release
on:
  # Requires manual trigger
  # Learn more: https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
  workflow_dispatch:
    inputs:
      version:
        description: "Version of the release (Help: https://semver.org)"
        required: true
      baseUrl:
        description: "Base URL of the VaxFinder REST API"
        required: true
        default: "https://vax-availability-api.azurewebsites.net"
      tagMessage:
        description: "Tagging message"
        required: false
        default: ""
jobs:
  validate-inputs:
    name: Validate inputs
    runs-on: ubuntu-latest
    steps:
      - name: "Validate input: Version"
        run: |
          version="${{ github.event.inputs.version }}"
          # Regex Credit: https://gist.github.com/rverst/1f0b97da3cbeb7d93f4986df6e8e5695
          if [[ ! $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]];
          then
            echo "\"$version\" is not a valid version (i.e. does not follow semantic versioning)."
            exit 1
          fi
          echo "\"$version\" is a valid version."
      - name: "Validate input: Base URL"
        run: |
          url="${{ github.event.inputs.baseUrl }}"
          # Regex Credit: https://stackoverflow.com/questions/3183444/check-for-valid-link-url
          if [[ ! $url =~ ^((https)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]) ]];
          then
            echo "\"$url\" is not a valid url."
            exit 1
          fi
          echo "\"$url\" is a valid url."

  stable-branch:
    name: Merge main into stable branch
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: main
          token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

      - name: Merge main into stable branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: stable
          github_token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

  # Generate CLI documentation for version in stable branch
  generate-docs:
    name: Generate CLI documentation
    runs-on: ubuntu-latest
    needs: [validate-inputs, stable-branch]
    outputs:
      new_sha: ${{ steps.get_sha.outputs.SHA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: stable
          token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

      - name: Configure Git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: Generate docs for version
        run: go run ./scripts/gen-docs/main.go ${{ github.event.inputs.version }}

      - name: Commit and push docs into main branch
        run: |
          git add .
          git status
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m ':memo: Auto generated docs in `docs/${{ github.event.inputs.version }}`.'
            git push
          fi

      - id: get_sha
        name: Get SHA of the latest commit
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "::set-output name=SHA::$sha_new"

  main-branch:
    name: Merge stable into main branch
    runs-on: ubuntu-latest
    needs: [validate-inputs, stable-branch, generate-docs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-docs.outputs.new_sha }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

      - name: Merge stable into main branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          head_to_merge: stable
          target_branch: main
          github_token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

  tag:
    name: Tag release
    runs-on: ubuntu-latest
    needs: [validate-inputs, stable-branch, generate-docs, main-branch]
    outputs:
      new_sha: ${{ steps.get_sha.outputs.SHA }}
    env:
      TAG_NAME: "v${{ github.event.inputs.version }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-docs.outputs.new_sha }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

      - name: Configure Git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: Tag and push to repository
        run: |
          tagMsg="${{ github.event.inputs.tagMessage }}"
          if [ "$tagMsg" == "" ]
          then
              tagMsg="Releasing version v${{ github.event.inputs.version }}"
          fi
          git tag -a "${{ env.TAG_NAME }}" -m "$tagMsg"
          git push origin "${{ env.TAG_NAME }}"

      - id: get_sha
        name: Get SHA of the latest commit
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "::set-output name=SHA::$sha_new"

  build:
    name: Build and release
    runs-on: ubuntu-latest
    needs: [validate-inputs, stable-branch, generate-docs, main-branch, tag]
    env:
      VERSION_NAME: "v${{ github.event.inputs.version }}"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.tag.outputs.new_sha }}
          fetch-depth: 0
          token: ${{ secrets.ADMIN_ACCESS_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_ACCESS_TOKEN }}
          VERSION: ${{ github.event.inputs.version }}
          BASE_URL: ${{ github.event.inputs.baseUrl }}
